// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel MeshGen
#include "/Includes/MarchTables.compute"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

struct Triangle {
    float3 A;
    float3 B;
    float3 C;
};

RWTexture3D<float4> noiseTexture;
AppendStructuredBuffer<Triangle> triangles; 
//RWStructuredBuffer<float4x4> debug;

float3 scale;
int xdim;
int ydim;
int zdim;

float isoLevel;

float3 interpolateVerts(float4 v1, float4 v2)
{
    float t = (isoLevel - v1.w) / (v2.w - v1.w);
    return v1.xyz + t * (v2.xyz - v1.xyz);
}

void MarchingCubes(int bufferIndex, int cubeIndex, float4 cubeCorners[8], bool edge)
{
    // Create triangles for current cube configuration
    for (int i = 0; triangulation[cubeIndex][i] != -1; i += 3) {
        // Get indices of corner points A and B for each of the three edges
        // of the cube that need to be joined to form the triangle.
        int a0 = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
        int b0 = cornerIndexBFromEdge[triangulation[cubeIndex][i]];

        int a1 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 1]];
        int b1 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 1]];

        int a2 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 2]];
        int b2 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 2]];

        Triangle t;
        t.A = interpolateVerts(cubeCorners[a1], cubeCorners[b1]) * scale;
        t.B = interpolateVerts(cubeCorners[a2], cubeCorners[b2]) * scale;
        t.C = interpolateVerts(cubeCorners[a0], cubeCorners[b0]) * scale;
        triangles.Append(t);
    }
}

[numthreads(10, 10, 10)]
void MeshGen(uint3 id : SV_DispatchThreadID)
{
    uint width = 0;
    uint height = 0;
    uint depth = 0;
    noiseTexture.GetDimensions(width, height, depth);
    if (id.y >= ydim || id.x >= xdim || id.z >= zdim) return;

    // calculate texture indices
    float ld = max((float)xdim, max((float)ydim, (float)zdim));
    uint3 tid1 = uint3((float)id.x / (float)ld * (float)(width - 1), (float)id.y / (float)ld * (float)(height - 1), (float)id.z / (float)ld * (float)(depth - 1));
    uint3 tid2 = uint3((float)(id.x + 1) / (float)ld * (float)(width - 1), (float)id.y / (float)ld * (float)(height - 1), (float)id.z / (float)ld * (float)(depth - 1));
    uint3 tid3 = uint3((float)(id.x + 1) / (float)ld * (float)(width - 1), (float)id.y / (float)ld * (float)(height - 1), (float)(id.z + 1) / (float)ld * (float)(depth - 1));
    uint3 tid4 = uint3((float)id.x / (float)ld * (float)(width - 1), (float)id.y / (float)ld * (float)(height - 1), (float)(id.z + 1) / (float)ld * (float)(depth - 1));
    uint3 tid5 = uint3((float)id.x / (float)ld * (float)(width - 1), (float)(id.y + 1) / (float)ld * (float)(height - 1), (float)id.z / (float)ld * (float)(depth - 1));
    uint3 tid6 = uint3((float)(id.x + 1) / (float)ld * (float)(width - 1), (float)(id.y + 1) / (float)ld * (float)(height - 1), (float)id.z / (float)ld * (float)(depth - 1));
    uint3 tid7 = uint3((float)(id.x + 1) / (float)ld * (float)(width - 1), (float)(id.y + 1) / (float)ld * (float)(height - 1), (float)(id.z + 1) / (float)ld * (float)(depth - 1));
    uint3 tid8 = uint3((float)id.x / (float)ld * (float)(width - 1), (float)(id.y + 1) / (float)ld * (float)(height - 1), (float)(id.z + 1) / (float)ld * (float)(depth - 1));

    // assign weights of texture
    float4 cubeCorners[8] = {
        float4(id.x, id.y, id.z, noiseTexture[tid1].x),
        float4(id.x + 1, id.y, id.z, noiseTexture[tid2].x),
        float4(id.x + 1, id.y, id.z + 1, noiseTexture[tid3].x),
        float4(id.x, id.y, id.z + 1, noiseTexture[tid4].x),
        float4(id.x, id.y + 1, id.z, noiseTexture[tid5].x),
        float4(id.x + 1, id.y + 1, id.z, noiseTexture[tid6].x),
        float4(id.x + 1, id.y + 1, id.z + 1, noiseTexture[tid7].x),
        float4(id.x, id.y + 1, id.z + 1, noiseTexture[tid8].x)
    };

    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    // The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.
    int cubeIndex = 0;
    if (cubeCorners[0].w < isoLevel) cubeIndex |= 1;
    if (cubeCorners[1].w < isoLevel) cubeIndex |= 2;
    if (cubeCorners[2].w < isoLevel) cubeIndex |= 4;
    if (cubeCorners[3].w < isoLevel) cubeIndex |= 8;
    if (cubeCorners[4].w < isoLevel) cubeIndex |= 16;
    if (cubeCorners[5].w < isoLevel) cubeIndex |= 32;
    if (cubeCorners[6].w < isoLevel) cubeIndex |= 64;
    if (cubeCorners[7].w < isoLevel) cubeIndex |= 128;

    int bufferIndex = id.z * zdim * ydim + id.y * ydim + id.x;
    MarchingCubes(bufferIndex, cubeIndex, cubeCorners, false);
}
