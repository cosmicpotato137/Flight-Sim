// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Noise2D

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

RWTexture2D<float4> Result;
RWStructuredBuffer<uint> perm;

float2 offset;
float2 scale;
float noiseWeight;
float alpha;
int seed;

static int grad3[12][3] = {
	{1,1,0},{-1,1,0}, {1,-1,0}, {-1,-1,0},
	{1,0,1}, {-1,0,1}, {1,0,-1}, {-1,0,-1},
	{0,1,1}, {0,-1,1}, {0,1,-1}, {0,-1,-1}
};

// This method is a *lot* faster than using (int)Math.floor(x)
int fastfloor(float x) {
	return x > 0 ? (int)x : (int)x - 1;
}

float dot(float2 g, float x, float y) {
	return g.x * x + g.y * y;
}

float mix(float a, float b, float t) {
	return (1 - t) * a + t * b;
}

float fade(float t) {
	return t * t * t * (t * (t * 6 - 15) + 10);
}

// Classic Perlin noise, 3D version
float noise(float x, float y/*, float z*/) {
	y = y / scale.y + offset.y;
	x = x / scale.x + offset.x;

	// Find unit grid cell containing point
	int X = fastfloor(x);
	int Y = fastfloor(y);

	// Get relative xyz coordinates of point within that cell
	x = x - X;
	y = y - Y;

	// Wrap the integer cells at 255 (smaller integer period can be introduced here)
	X = X & 255;
	Y = Y & 255;

	uint gi00 = perm[X + perm[Y]] % 12;
	uint gi10 = perm[X + 1 + perm[Y]] % 12;
	uint gi01 = perm[X + perm[Y + 1]] % 12;
	uint gi11 = perm[X + 1 + perm[Y + 1]] % 12;

	// The gradients of each corner are now:
	// g000 = grad3[gi000];
	// g001 = grad3[gi001];
	// g010 = grad3[gi010];
	// g011 = grad3[gi011];
	// g100 = grad3[gi100];
	// g101 = grad3[gi101];
	// g110 = grad3[gi110];
	// g111 = grad3[gi111];

	// Calculate noise contributions from each of the four corners
	float n00 = dot(float2(grad3[gi00][0], grad3[gi00][1]), x, y);
	float n10 = dot(float2(grad3[gi10][0], grad3[gi10][1]), x - 1, y);
	float n01 = dot(float2(grad3[gi01][0], grad3[gi01][1]), x, y - 1);
	float n11 = dot(float2(grad3[gi11][0], grad3[gi11][1]), x - 1, y - 1);

	// Compute the fade curve value for each of x, y, z
	float u = fade(x);
	float v = fade(y);

	// Interpolate along x and y axes
	float nx0 = mix(n00, n10, u);
	float nx1 = mix(n01, n11, u);
	float nxy = mix(nx0, nx1, v);

	return nxy;
}

[numthreads(8, 8, 1)]
void Noise2D(uint3 id : SV_DispatchThreadID)
{
	float n = noise(id.x, id.y) * noiseWeight + 0.5;
	Result[id.xy] = float4(n, n, n, alpha);
}