// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Noise3D

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture3D<float4> Result;

float3 offset;
float3 scale;
float noiseWeight;
int seed;
float alpha;

float interpolate(float a0, float a1, float w) {
    // You may want clamping by inserting:

    //if (0.0 > w) return a0;
    //if (1.0 < w) return a1;
    //return (a1 - a0) * w + a0;  
    // Use this cubic interpolation [[Smoothstep]] instead, for a smooth appearance:
    //return (a1 - a0) * (3.0 - w * 2.0) * w * w + a0;

    // Use [[Smootherstep]] for an even smoother result with a second derivative equal to zero on boundaries:
    return (a1 - a0) * ((w * (w * 6.0 - 15.0) + 10.0) * w * w * w) + a0;

}

// Create random direction vector
float3 randomGradient(int3 ipos, int seed) {
    float3 random;
    random.x = sin(ipos.x * 21942.f + ipos.y * 171324.f + ipos.z * 2853290.f + 8912.f) * cos(ipos.x * 23157.f * ipos.y * 217832.f + ipos.z * 9532901.f + 9758.f);
    random.y = sin(ipos.x * 57480.f + ipos.y * 940915.f + ipos.z * 4893152.f + 1111.f) * sin(ipos.x * 27848.f + ipos.y * 110092.f + ipos.z * 1237589.f + 3182.f);
    random.z = cos(ipos.x * 39320.f + ipos.y * 390288.f + ipos.z * 3870011.f + 8590.f);
    random = random * 2902.f;
    float r = dot(random, float3(seed, seed, seed));
    return float3(cos(r) * sin(r), sin(r) * sin(r), cos(r));
}

// Computes the dot product of the distance and gradient vectors.
float dotGridGradient(int3 ipos, float3 pos, float3 gradient) {
    // Compute the distance vector
    float dx = pos.x - (float)ipos.x;
    float dy = pos.y - (float)ipos.y;
    float dz = pos.z - (float)ipos.z;

    // Compute the dot-product
    return (dx * gradient.x + dy * gradient.y + dz * gradient.z);
}

//float3 randomGradient(int3 ipos, int seed) {
//    float2 random = float2(sin(ipos.x * 21942.f + ipos.y * 171324.f + 8912.f), cos(ipos.x * 23157.f * ipos.y * 217832.f + 9758.f)) * 2920.f;
//    float r = dot(random, float2(seed, seed));
//    return float3(cos(r), sin(r), 0.5f);
//}

// Computes the dot product of the distance and gradient vectors.
//float dotGridGradient(int3 ipos, float3 pos, float2 gradient) {
//    // Compute the distance vector
//    float dx = pos.x - (float)ipos.x;
//    float dy = pos.y - (float)ipos.y;
//
//    // Compute the dot-product
//    return (dx * gradient.x + dy * gradient.y);
//}

//float2 randomGradient(int ix, int iy, int seed) {
//    float2 random = float2(sin(ix * 21942.f + iy * 171324.f + 8912.f), cos(ix * 23157.f * iy * 217832.f + 9758.f)) * 2920.f;
//    float r = dot(random, float2(seed, seed));
//    return float2(cos(r), sin(r));
//}

// Computes the dot product of the distance and gradient vectors.
//float dotGridGradient(int ix, int iy, float x, float y, float2 gradient) {
//    // Compute the distance vector
//    float dx = x - (float)ix;
//    float dy = y - (float)iy;
//
//    // Compute the dot-product
//    return (dx * gradient.x + dy * gradient.y);
//}

// Compute Perlin noise at coordinates x, y
float perlin(float x, float y, float z, float3 offset, float3 scale, int seed) {
    // tile the random looking part of the noise function
    y = y / scale.y + offset.y;
    x = x / scale.x + offset.x;
    z = z / scale.z + offset.z;

    int x0, y0, z0;
    // Determine grid cell coordinates
    if (x > 0)
        x0 = (int)x;
    else
        x0 = (int)(x - 1);
    int x1 = x0 + 1;

    if (y > 0)
        y0 = (int)y;
    else
        y0 = (int)(y - 1);
    int y1 = y0 + 1;

    if (z > 0)
        z0 = (int)z;
    else
        z0 = (int)(z - 1);
    int z1 = z0 + 1;

    // Determine interpolation weights
    // Could also use higher order polynomial/s-curve here
    float sx = x - (float)x0;
    float sy = y - (float)y0;
    float sz = z - (float)z0;

    // Interpolate between grid point gradients
    float n0, n1, ix0, ix1, ixy0, ixy1, value;

    n0 = dotGridGradient(int3(x0, y0, z0), float3(x, y, z), randomGradient(int3(x0, y0, z0), seed));
    n1 = dotGridGradient(int3(x1, y0, z0), float3(x, y, z), randomGradient(int3(x1, y0, z0), seed));
    ix0 = interpolate(n0, n1, sx);

    n1 = dotGridGradient(int3(x1, y1, z0), float3(x, y, z), randomGradient(int3(x1, y1, z0), seed));
    n0 = dotGridGradient(int3(x0, y1, z0), float3(x, y, z), randomGradient(int3(x0, y1, z0), seed));
    ix1 = interpolate(n0, n1, sx);

    ixy0 = interpolate(ix0, ix1, sy);

    n0 = dotGridGradient(int3(x0, y0, z1), float3(x, y, z), randomGradient(int3(x0, y0, z1), seed));
    n1 = dotGridGradient(int3(x1, y0, z1), float3(x, y, z), randomGradient(int3(x1, y0, z1), seed));
    ix0 = interpolate(n0, n1, sx);

    n1 = dotGridGradient(int3(x1, y1, z1), float3(x, y, z), randomGradient(int3(x1, y1, z1), seed));
    n0 = dotGridGradient(int3(x0, y1, z1), float3(x, y, z), randomGradient(int3(x0, y1, z1), seed));
    ix1 = interpolate(n0, n1, sx);

    ixy1 = interpolate(ix0, ix1, sy);

    value = interpolate(ixy0, ixy1, sz);
    return value;
}


[numthreads(8, 8, 8)]
void Noise3D(uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    float v = perlin(id.x, id.y, id.z, offset, scale, seed) * noiseWeight + 0.5;
    //v = randomGradient(id.x / scale.x + offset.x, id.y / scale.y + offset.y).x;
    Result[id.xyz] = float4(v, v, v, alpha);
}
