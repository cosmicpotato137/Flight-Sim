// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Noise3D

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

RWTexture3D<float4> Result;
RWStructuredBuffer<uint> perm;

float3 offset;
float3 scale;
float noiseWeight;
float alpha;
int seed;

static int grad3[12][3] = {
	{1,1,0},{-1,1,0}, {1,-1,0}, {-1,-1,0},
	{1,0,1}, {-1,0,1}, {1,0,-1}, {-1,0,-1},
	{0,1,1}, {0,-1,1}, {0,1,-1}, {0,-1,-1}
};

// This method is a *lot* faster than using (int)Math.floor(x)
int fastfloor(float x) {
	return x > 0 ? (int)x : (int)x - 1;
}

float dot(float3 g, float x, float y, float z) {
	return g.x * x + g.y * y + g.z * z;
}

float mix(float a, float b, float t) {
	return (1 - t) * a + t * b;
}

float fade(float t) {
	return t * t * t * (t * (t * 6 - 15) + 10);
}

// Classic Perlin noise, 3D version
float noise(float x, float y, float z) {
	y = y / scale.y + offset.y;
	x = x / scale.x + offset.x;
	z = z / scale.z + offset.z;

	// Find unit grid cell containing point
	int X = fastfloor(x);
	int Y = fastfloor(y);
	int Z = fastfloor(z);

	// Get relative xyz coordinates of point within that cell
	x = x - X;
	y = y - Y;
	z = z - Z;

	// Wrap the integer cells at 255 (smaller integer period can be introduced here)
	X = X & 255;
	Y = Y & 255;
	Z = Z & 255;

	// Calculate a set of eight hashed gradient indices
	int gi000 = perm[X + perm[Y + perm[Z]]] % 12;
	int gi001 = perm[X + perm[Y + perm[Z + 1]]] % 12;
	int gi010 = perm[X + perm[Y + 1 + perm[Z]]] % 12;
	int gi011 = perm[X + perm[Y + 1 + perm[Z + 1]]] % 12;
	int gi100 = perm[X + 1 + perm[Y + perm[Z]]] % 12;
	int gi101 = perm[X + 1 + perm[Y + perm[Z + 1]]] % 12;
	int gi110 = perm[X + 1 + perm[Y + 1 + perm[Z]]] % 12;
	int gi111 = perm[X + 1 + perm[Y + 1 + perm[Z + 1]]] % 12;

	// The gradients of each corner are now:
	// g000 = grad3[gi000];
	// g001 = grad3[gi001];
	// g010 = grad3[gi010];
	// g011 = grad3[gi011];
	// g100 = grad3[gi100];
	// g101 = grad3[gi101];
	// g110 = grad3[gi110];
	// g111 = grad3[gi111];

	// Calculate noise contributions from each of the eight corners
	float n000 = dot(float3(grad3[gi000][0], grad3[gi000][1], grad3[gi000][2]), x, y, z);
	float n100 = dot(float3(grad3[gi100][0], grad3[gi100][1], grad3[gi100][2]), x - 1, y, z);
	float n010 = dot(float3(grad3[gi010][0], grad3[gi010][1], grad3[gi010][2]), x, y - 1, z);
	float n110 = dot(float3(grad3[gi110][0], grad3[gi110][1], grad3[gi110][2]), x - 1, y - 1, z);
	float n001 = dot(float3(grad3[gi001][0], grad3[gi001][1], grad3[gi001][2]), x, y, z - 1);
	float n101 = dot(float3(grad3[gi101][0], grad3[gi101][1], grad3[gi101][2]), x - 1, y, z - 1);
	float n011 = dot(float3(grad3[gi011][0], grad3[gi011][1], grad3[gi011][2]), x, y - 1, z - 1);
	float n111 = dot(float3(grad3[gi111][0], grad3[gi111][1], grad3[gi111][2]), x - 1, y - 1, z - 1);

	// Compute the fade curve value for each of x, y, z
	float u = fade(x);
	float v = fade(y);
	float w = fade(z);

	// Interpolate along x the contributions from each of the corners
	float nx00 = mix(n000, n100, u);
	float nx01 = mix(n001, n101, u);
	float nx10 = mix(n010, n110, u);
	float nx11 = mix(n011, n111, u);

	// Interpolate the four results along y
	float nxy0 = mix(nx00, nx10, v);
	float nxy1 = mix(nx01, nx11, v);

	// Interpolate the two last results along z
	float nxyz = mix(nxy0, nxy1, w);

	return nxyz;
}

[numthreads(8, 8, 8)]
void Noise3D(uint3 id : SV_DispatchThreadID)
{
	float n = noise(id.x, id.y, id.z) * noiseWeight + 0.5;
	Result[id.xyz] = float4(n, n, n, alpha);
}