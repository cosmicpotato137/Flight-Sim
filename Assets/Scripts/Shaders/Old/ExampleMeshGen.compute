// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Test1

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<int> indices;
uint colCount;
uint rowCount;

RWStructuredBuffer<float2> debug;

void CreateTri(int triInd, int x, int y) 
{
    vertices[triInd + 0] = float3(x, y, 0);
    vertices[triInd + 1] = float3(x, y + 1, 0);
    vertices[triInd + 2] = float3(x + 1, y, 0);
    indices[triInd + 0] = triInd + 0;
    indices[triInd + 1] = triInd + 1;
    indices[triInd + 2] = triInd + 2;
}

[numthreads(10, 10, 1)] 
void Test1 (uint3 id : SV_DispatchThreadID)
{
    uint vlen = 0;
    uint vstride = 0;
    vertices.GetDimensions(vlen, vstride);
    if (id.x >= colCount || id.y >= rowCount) return;

    debug[id.y * colCount + id.x] = int2(id.x, id.y);
    int triInd = (id.x + id.y * colCount) * 3;
    CreateTri(triInd, id.x, id.y);
}
